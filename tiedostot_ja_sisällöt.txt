===== ./README.md =====
# py-r-n-tietolomake

===== ./package.json =====
{
  "name": "price-estimate-api",
  "private": true,
  "type": "module",
  "dependencies": {
    "@supabase/supabase-js": "^2.45.0"
  }
}


===== ./api/brands.js =====
import { createClient } from '@supabase/supabase-js';

const TABLE = process.env.TABLE_NAME || 'e_bikes';

export default async function handler(req, res) {
  cors(res);
  if (req.method === 'OPTIONS') return res.status(200).end();

  try {
    const sb = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);
    const { data, error } = await sb.from(TABLE).select('brand_name, brand_slug');
    if (error) throw error;

    // Deduplikointi ja aakkosjärjestys
    const map = new Map();
    for (const r of data) {
      if (!map.has(r.brand_slug)) map.set(r.brand_slug, { slug: r.brand_slug, name: r.brand_name });
    }
    const brands = [...map.values()].sort((a, b) => a.name.localeCompare(b.name));
    return res.status(200).json({ brands });
  } catch (e) {
    console.error('brands error', e);
    return res.status(500).json({ error: String(e.message || e) });
  }
}

function cors(res) {
  res.setHeader('Access-Control-Allow-Origin', '*'); // halutessa rajaa omaan domainiin
  res.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
}


===== ./api/models.js =====
import { createClient } from '@supabase/supabase-js';

const RPC = process.env.RPC_NAME || 'search_models';

export default async function handler(req, res) {
  cors(res);
  if (req.method === 'OPTIONS') return res.status(200).end();

  const { brand, year, q } = req.query;
  if (!brand || !year || !q || q.length < 2) {
    return res.status(200).json({ results: [] });
  }

  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
    return res.status(500).json({ error: 'Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY' });
  }

  try {
    const sb = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);
    const { data, error } = await sb.rpc(RPC, { p_brand: brand, p_year: +year, p_q: q });
    if (error) throw error;
    return res.status(200).json({ results: data }); // [{ model_slug, display_name }]
  } catch (e) {
    console.error('models error', e);
    return res.status(500).json({ error: String(e.message || e) });
  }
}

function cors(res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
}


===== ./api/quote.js =====
// api/quote.js
import { createClient } from '@supabase/supabase-js';

const QUOTES = process.env.QUOTES_TABLE || 'quotes';

export default async function handler(req, res) {
  setCors(res);
  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const body = await readJson(req);

    // --- otetaan kentät ---
    const {
      brand, year, model, model_slug, size,
      mileage_km, price_new_eur,
      receipt_status, tuned_over_25, assist_ok,
      notes, customer_name, email, phone,
      privacy_consent, photo_urls
    } = body || {};

    // --- minimit ---
    if (!brand || !year || !email) {
      return res.status(400).json({ error: 'brand, year and email are required' });
    }
    if (!model && !model_slug) {
      return res.status(400).json({ error: 'model or model_slug is required' });
    }
    if (!privacy_consent) {
      return res.status(400).json({ error: 'privacy consent required' });
    }

    // --- liiketoimintasäännöt (sama kuin UI:ssa) ---
    const yearNum = parseInt(year, 10);
    const okYear = yearNum >= 2020 && yearNum <= 2025;
    const okMileage = (mileage_km ?? 0) <= 7000;
    const okPrice = (price_new_eur ?? 0) <= 7000;
    const okReceipt = receipt_status && receipt_status !== 'no';
    const okTuning = tuned_over_25 === false;
    const okAssist = assist_ok === true;

    if (!(okYear && okMileage && okPrice && okReceipt && okTuning && okAssist)) {
      return res.status(400).json({ error: 'Bike does not meet purchase criteria' });
    }

    // --- talletus ---
    const sb = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);
    const row = {
      brand_slug: String(brand).toLowerCase(),
      year: String(year),
      model_input: model || null,
      model_slug: model_slug || null,
      size: size || null,
      mileage_km: mileage_km !== undefined && mileage_km !== '' ? Number(mileage_km) : null,
      price_new_eur: price_new_eur !== undefined && price_new_eur !== '' ? Number(price_new_eur) : null,
      receipt_status: receipt_status || null,
      tuned_over_25: tuned_over_25 ?? null,
      assist_ok: assist_ok ?? null,
      notes: notes || null,
      customer_name: customer_name || null,
      email,
      phone: phone || null,
      privacy_consent: !!privacy_consent,
      photo_urls: Array.isArray(photo_urls) ? photo_urls : [],
      source: 'shopify'
    };

    const { data, error } = await sb.from(QUOTES).insert([row]).select().single();
    if (error) throw error;

    // (valinn.) vie Makeen/Sheetsiin
    if (process.env.MAKE_WEBHOOK_URL) {
      fetch(process.env.MAKE_WEBHOOK_URL, {
        method: 'POST',
        headers: { 'Content-Type':'application/json' },
        body: JSON.stringify(data)
      }).catch(err => console.error('MAKE webhook failed:', err));
    }

    return res.status(200).json({ ok: true, id: data.id });
  } catch (e) {
    console.error('quote error', e);
    return res.status(500).json({ error: String(e.message || e) });
  }
}

function setCors(res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
}
async function readJson(req) {
  if (req.body && typeof req.body === 'object') return req.body;
  const chunks = [];
  for await (const ch of req) chunks.push(ch);
  const text = Buffer.concat(chunks).toString('utf8');
  return text ? JSON.parse(text) : {};
}


===== ./api/years.js =====
import { createClient } from '@supabase/supabase-js';

const TABLE = process.env.TABLE_NAME || 'e_bikes';

export default async function handler(req, res) {
  cors(res);
  if (req.method === 'OPTIONS') return res.status(200).end();

  const { brand } = req.query || {};
  if (!brand) return res.status(400).json({ error: 'brand is required' });

  try {
    const sb = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);

    // Hae vain year-kenttä valitulle merkille (case-insensitive) ja poista nullit
    const { data, error } = await sb
      .from(TABLE)
      .select('year', { head: false })
      .ilike('brand_slug', brand)   // case-insensitive varmuuden vuoksi
      .not('year', 'is', null);

    if (error) throw error;

    // Poimi “siisti” nelinumeroinen 20xx-vuosi
    const extractYear = (y) => {
      const m = String(y).match(/\b(20\d{2})\b/);
      return m ? parseInt(m[1], 10) : null;
    };

    const years = [...new Set((data || []).map(r => extractYear(r.year)).filter(Boolean))]
      .sort((a, b) => b - a);

    return res.status(200).json({ years });
  } catch (e) {
    console.error('years error', { brand, msg: e?.message || e });
    return res.status(500).json({ error: String(e.message || e) });
  }
}

function cors(res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
}


===== ./api/upload.js =====
// api/upload.js
import { createClient } from '@supabase/supabase-js';

const BUCKET = process.env.BUCKET_NAME || 'quote_uploads';

export const config = {
  api: {
    bodyParser: { sizeLimit: '10mb' } // riittää 3–5 kuvaa / lomake
  }
};

export default async function handler(req, res) {
  setCors(res);
  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const { files } = await readJson(req); // [{name,type,data}] data=base64 ilman prefixiä
    if (!Array.isArray(files) || files.length === 0) {
      return res.status(400).json({ error: 'files[] required' });
    }

    const supa = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);
    const out = [];

    for (const f of files) {
      const { name, type, data } = f || {};
      if (!name || !type || !data) continue;

      const bytes = Buffer.from(data, 'base64');
      const ext = (name.split('.').pop() || 'bin').toLowerCase();
      const key = `${new Date().toISOString().slice(0,10)}/${cryptoRandom(8)}_${sanitize(name)}`;

      const { error } = await supa.storage.from(BUCKET).upload(key, bytes, {
        contentType: type,
        upsert: false
      });
      if (error) throw error;

      const { data: pub } = supa.storage.from(BUCKET).getPublicUrl(key);
      out.push(pub.publicUrl);
    }

    return res.status(200).json({ urls: out });
  } catch (e) {
    console.error('upload error', e);
    return res.status(500).json({ error: String(e.message || e) });
  }
}

function setCors(res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
}

async function readJson(req) {
  if (req.body && typeof req.body === 'object') return req.body;
  const chunks = [];
  for await (const ch of req) chunks.push(ch);
  const text = Buffer.concat(chunks).toString('utf8');
  return text ? JSON.parse(text) : {};
}

function cryptoRandom(n) {
  return [...crypto.getRandomValues(new Uint8Array(n))].map(b => b.toString(16).padStart(2,'0')).join('');
}

function sanitize(name) {
  return name.replace(/[^\w.\-]+/g, '_').slice(-80);
}


===== ./api/health.js =====
export default function handler(req, res) {
  res.status(200).json({
    ok: true,
    hasUrl: !!process.env.SUPABASE_URL,
    hasKey: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
    table: process.env.TABLE_NAME || 'e_bikes',
    rpc: process.env.RPC_NAME || 'search_models'
  });
}


